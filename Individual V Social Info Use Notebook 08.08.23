---
title: "Individual V Social Info Use Notebook Aug 11,2023"
output: html_notebook
author: "Brandi Christiano"
editor_options: 
  chunk_output_type: console
---

```{r}
# Updated November 15, 2023 on Nolan's desktop
```

```{r}
library(ggplot2)
library(dplyr)
library(binom)
```

```{r}
setwd("C:/Users/15707/OneDrive/Desktop/Social Learning Paper")
sucDf1 <- read.csv("successdf1.csv")
sucDf1
```


```{r}
indiv<-subset(sucDf1,Test== "individual")
indiv
indiv_cleaned <- na.omit(indiv)
indiv_cleaned


social<-subset(sucDf1,Test== "social")
social
social_cleaned <- na.omit(social)
social_cleaned

choice<-subset(sucDf1,Test== "choice")
choice
choice_cleaned <- na.omit(choice)
choice_cleaned
```


```{r}
# Individual Test 

# Exact binomial test 
successInd<-sum(indiv_cleaned$Success)
successInd
resultInd<-binom.test(successInd, length(indiv_cleaned$Success), p=0.5, alternative = "two.sided")
resultInd 
```

```{r}
# Social Test
successSoc <-sum(social_cleaned$Success)
successSoc
resultSoc<-binom.test(successSoc, length(social_cleaned$Success), p=0.5, alternative = "two.sided")
resultSoc
```

```{r}
# Choice Test
successCho <-sum(choice_cleaned$Success)
successCho
resultCho<-binom.test(successCho, length(choice_cleaned$Success), p=0.5, alternative = "two.sided")
resultCho
```


```{r}
indiv2 <- indiv_cleaned %>% 
  mutate(Flavor_Chosen = if_else(FlavorFed == FlavorFirstApproached, "Familiar (own) ", "Unfamiliar"))
indiv2

counts <- table(indiv2$Flavor_Chosen)
ggplot(data = indiv2, aes(x = Flavor_Chosen, fill = Flavor_Chosen)) +
  geom_bar() +
  scale_fill_manual(values = c("#5ab4ac", "#d8b365")) +
  labs(title = "Bat's Flavor Choice", x = "Flavor", y = "Count") +
  theme_bw() +
  guides(fill = "none") +
   ylim(0, 30) +
  scale_y_continuous(breaks = seq(0, 30, by = 1))



social2 <- social_cleaned %>% 
  mutate(Flavor_ChosenS = if_else(PartnerFlavor == FlavorFirstApproached, "Familiar (social) flavor", " Unfamilar flavor"))
social2

counts2 <- table(social2$Flavor_ChosenS)
ggplot(data = social2, aes(x = Flavor_ChosenS, fill = Flavor_ChosenS)) +
  geom_bar() +
  scale_fill_manual(values = c("#01665e", "#d8b365")) +
  labs(title = "Bat's Flavor Choice", x = "Flavor", y = "Count") +
  theme_bw() +
  guides(fill = "none") +
   ylim(0, 30) +
  scale_y_continuous(breaks = seq(0, 30, by = 1))

choice2 <- choice_cleaned %>% 
  mutate(Flavor_ChosenC = if_else(FlavorFed == FlavorFirstApproached, "Own flavor", "Social Flavor"))
choice2

counts <- table(choice2$Success)
counts
ggplot(data = choice2, aes(x = Success , fill =Flavor_ChosenC )) +
  geom_bar() +
  scale_fill_manual(values = c("#5ab4ac", "#01665e")) +
  labs(title = "Bats that chose fed flavor when given choice between individual and social flavor", x = "", y = "Count") +
  theme_bw() +
  guides(fill = "none") +
   ylim(0, 10) +
  scale_y_continuous(breaks = seq(0, 30, by = 1))
plot3
```


```{r}
# Try simulating 10,000 data points from my data to see if that changes anything

# --- same thing as above
indiv<-subset(sucDf1,Test== "individual")
indiv_cleaned <- na.omit(indiv)
successInd<-sum(indiv_cleaned$Success)
successInd
resultInd<-binom.test(successInd, length(indiv_cleaned$Success), p=0.5, alternative = "two.sided")
resultInd 
# ---

library(binom)


# Number of simulations
num_simulations <- 100000

# Container for simulated test statistics
simulated_test_stats <- numeric(num_simulations)

# Perform 10000 simulations
for (i in 1:num_simulations) {
  # Generate a random sample under the null hypothesis (p = 0.5)
  simulated_successes <- rbinom(1, size = length(indiv_cleaned$Success), prob = 0.5)
  
  # Perform the exact binomial test on the simulated sample
  simulated_result <- binom.test(simulated_successes, length(indiv_cleaned$Success), p = 0.5, alternative = "two.sided")
  
  # Store the test statistic from each simulation
  simulated_test_stats[i] <- simulated_result$statistic
}

# Calculate the p-value based on the simulations
p_value_simulatedIndiv <- sum(simulated_test_stats >= resultInd$statistic) / num_simulations

# Print the results
cat("Indivi Original Test Result:\n")
print(resultInd)

cat("\nSimulated p-value:", p_value_simulatedIndiv, "\n") # P = 0.071
```



```{r}
# Calculate the number of successes in the original data
successSoc <- sum(social_cleaned$Success)

# Perform the exact binomial test on the original data
resultSoc <- binom.test(successSoc, length(social_cleaned$Success), p = 0.5, alternative = "two.sided")

# Number of simulations
num_simulations <- 10000

# Container for simulated test statistics
simulated_test_stats <- numeric(num_simulations)

# Perform 10,000 simulations
for (i in 1:num_simulations) {
  # Generate a random sample under the null hypothesis (p = 0.5)
  simulated_successes <- rbinom(1, size = length(social_cleaned$Success), prob = 0.5)
  
  # Perform the exact binomial test on the simulated sample
  simulated_result <- binom.test(simulated_successes, length(social_cleaned$Success), p = 0.5, alternative = "two.sided")
  
  # Store the test statistic from each simulation
  simulated_test_stats[i] <- simulated_result$statistic
}

# Calculate the p-value based on the simulations
p_value_simulatedSoc <- sum(simulated_test_stats >= resultSoc$statistic) / num_simulations

# Print the original test result and the simulated p-value
cat("Original Test Result:\n")
print(resultSoc)

cat("\nSimulated p-value:", p_value_simulatedSoc, "\n") # p = 0.105
```


```{r}
# Calculate the number of successes in the original data
successCho <- sum(choice_cleaned$Success)

# Perform the exact binomial test on the original data
resultCho <- binom.test(successCho, length(choice_cleaned$Success), p = 0.5, alternative = "two.sided")

# Number of simulations
num_simulations <- 10000

# Container for simulated test statistics
simulated_test_stats <- numeric(num_simulations)

# Perform 10,000 simulations
for (i in 1:num_simulations) {
  # Generate a random sample under the null hypothesis (p = 0.5)
  simulated_successes <- rbinom(1, size = length(choice_cleaned$Success), prob = 0.5)
  
  # Perform the exact binomial test on the simulated sample
  simulated_result <- binom.test(simulated_successes, length(choice_cleaned$Success), p = 0.5, alternative = "two.sided")
  
  # Store the test statistic from each simulation
  simulated_test_stats[i] <- simulated_result$statistic
}

# Calculate the p-value based on the simulations
p_value_simulatedCho <- sum(simulated_test_stats >= resultCho$statistic) / num_simulations

# Print the original test result and the simulated p-value
cat("Original Test Result:\n")
print(resultCho)

cat("\nSimulated p-value:", p_value_simulatedCho, "\n") # p = 0.502

```

